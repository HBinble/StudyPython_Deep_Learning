1DAY

넘파이, 케라스, 파이토치, 텐서플로

딥러닝 기초

1. 넘파이(Numpy Basic)
	가. 배열(Array) 구조
		1) 리스트 구조
		2) 딕셔너리 구조
		3) 튜플 구조 - 데이터 수정 불가능
		- 리스트 레퍼런스로 해서 바뀐다.
		- 항상 copy() 사용해서 써야 배열이 바뀌지 않는다.
	
	나. 넘파이의 데이터 구조
		1) 스칼라 : 하나의 숫자로 이루어진 데이터 ex) 5
		2) 벡터 : 여러 개의 숫자를 특정한 순서대로 모아놓은 데이터 ex) (5, )
		3) 행렬 : 벡터들을 모아 놓은 데이터(2차원의 배열) ex) (5, 4) = 5행 4열
		4) 텐서 : 같은 크기의 텐서(2차원 이상)들을 모아 놓은 데이터 ex) (5, 4, 2) = 4 by 2 행렬이 5개 있다.
				(데이터의 갯수, 행, 열)
	
	다. 넘파이의 배열 특징(벡터연산과 브로드캐스팅 기능 제공)
		1) 벡터연산
			- 벡터연산은 같은 인덱스에 위치한 원소(Element-wise)들끼리 수행
			- 각각의 원소들끼리 연산
			- 2차원의 원소들은 같은 행, 같은 열에 대하여 연산
		2) 브로드캐스팅
			- 원소의 갯수가 다를때 등 ex) (3, ) + (2, ) operands could not be broadcast together
			- 연산 모양이 다른 배열들 간에 어떤 조건을 만족했을 때 가능해지도록 배열을 자동적으로 변환
			* 조건
				- 차원의 크기가 1일 경우 이거나 혹은 스칼라 값일 경우
				- 차원의 짝이 맞을 경우 차원에 대한 축의 길이가 동일하면 브로드캐스팅 기능이 가능
				
		* 정보이론?
		3) 넘파이 난수 생성
			- np.random.randn

2. 선형대수(Linear Algebra)

3. 머신러닝(Machine Learning)
	가. Representation
		- Category : 분류
		- Popularity : 회귀
		- IschainElement : 시계열
		- X ->(classfier) Y
	나. Notation
	다. Error
		- Loss Function
		- 예측값, 실제값의 차이
		- 학습 = 평균값을 구해서 Error를 줄여주는 것
	라. 벡터(Vectors)
	
4. 딥러닝(Deep Learning)
	가. 신경망(Perceptron)
		- 경험(inputs) -> 영향(weights) -> net input function -> activation function -> output
		- 기본 회귀분석에서 출발
			* 회귀분석을 어떻게 학습하는가?
				- 학습의 관점
				- 회귀분석의 전제 2가지
				1) x1 -> y : 독립변수가 변하면 종속변수가 변한다.
					- a(계수) + b(y절편)
					- y = ax + b
						- a와 b를 찾아내는 것 = 학습
						- Error를 최소화 하는것
						가) 랜덤하게 값을 뽑아낸다.(정규분포에서 뽑아내는것)
						나) 랜덤한 값에 대한 차이 평균
						다) a값을 올릴지 내릴지 확인
						라) a값을 찾기 위해 +,-를 반복
						마) 미분을 통한 확인
				2) x1, x2, x3 -> y : 독립변수 서로간 독립이어야 한다.
